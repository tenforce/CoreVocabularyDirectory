<?vsp
-- /doc and /about handler script
--
-- Copyright 2014 European Union
-- Author: Vianney le ClÃ©ment de Saint-Marcq (PwC EU Services)
--
-- Licensed under the EUPL, Version 1.1 or - as soon they
-- will be approved by the European Commission - subsequent
-- versions of the EUPL (the "Licence");
-- You may not use this work except in compliance with the
-- Licence.
-- You may obtain a copy of the Licence at:
-- http://ec.europa.eu/idabc/eupl
--
-- Unless required by applicable law or agreed to in
-- writing, software distributed under the Licence is
-- distributed on an "AS IS" basis,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
-- express or implied.
-- See the Licence for the specific language governing
-- permissions and limitations under the Licence.

-- Read HTTP parameters
declare _namespace, _type, _id, _uri, _format, uri varchar;
_namespace := get_keyword('namespace', params, '');
_type := get_keyword('type', params, '');
_id := get_keyword('id', params, '');
_uri := get_keyword('uri', params, '');
_format := get_keyword('format', params, '');

-- Fallbacks
if(_uri = '') {
  if(_id <> '') {
    _uri := sprintf('%BASEURI%id/%U/%U/%U', _namespace, _type, _id);
  } else if(_type <> '') {
    _uri := sprintf('%BASEURI%id/%U/%U', _namespace, _type);
  } else {
    _uri := sprintf('%BASEURI%id/%U/', _namespace);
  }
}

if(_format = '') {
  declare accept varchar;
  accept := http_request_header(lines, 'Accept');
  if(regexp_like(accept, 'application/rdf.xml')) {
    _format := 'rdf';
  } else if(regexp_like(accept, 'text/rdf.n3|text/rdf.turtle|text/turtle')) {
    _format := 'ttl';
  } else {
    _format := 'html';
  }
} else if(_format <> 'html' and _format <> 'rdf' and _format <> 'ttl') {
  _format := 'html';
}

-- Default query and stylesheet
declare query, stylesheet varchar;
query := 'CONSTRUCT {
  <URI> ?p ?o .
  ?s ?p <URI> .
  ?s rdfs:label ?slabel .
  ?p rdfs:label ?plabel .
  ?o rdfs:label ?olabel .
	?o dcterms:isPartOf ?d .
	?d rdfs:label ?dlabel .
	<URI> dcterms:isPartOf ?e .
	?e rdfs:label ?elabel .
	?s dcterms:isPartOf ?sd .
	?sd rdfs:label ?sdlabel .
  <http://www.w3.org/2004/02/skos/core#narrowMatch> rdfs:label "has narrow match" .
  <http://www.w3.org/2004/02/skos/core#broadMatch> rdfs:label "has broad match" .
} WHERE {
  {
    <URI> ?p ?o
    OPTIONAL { { SELECT ?p ?label AS ?plabel
                 WHERE { ?p rdfs:label ?label } GROUP BY ?p } }
    OPTIONAL { { SELECT ?o ?label AS ?olabel ?d ?alabel AS ?dlabel 
                 WHERE { ?o rdfs:label ?label .
		                     OPTIONAL { ?o dcterms:isPartOf ?d .
           								          ?d rdfs:label ?alabel } } GROUP BY ?o } }
  } UNION {
    ?s ?p <URI>
    OPTIONAL { { SELECT ?p ?label AS ?plabel
                 WHERE { ?p rdfs:label ?label } GROUP BY ?p } }
    OPTIONAL { { SELECT ?s ?label AS ?slabel ?sd ?sdlabel
                 WHERE { ?s rdfs:label ?label 
								         OPTIONAL { ?s dcterms:isPartOf ?sd .
												            ?sd rdfs:label ?sdlabel } } 
								GROUP BY ?s } }
		OPTIONAL { { SELECT ?e ?aelabel AS ?elabel
		             WHERE { <URI> dcterms:isPartOf ?e .
				             		 ?e rdfs:label ?aelabel } GROUP BY ?e } }
  } 
}';
stylesheet := 'about.xsl';

-- Specialized queries and/or stylesheets
-- None yet

query := replace(query, '<URI>', sprintf('<%s>', _uri));
stylesheet := sprintf('%ROOTURI%xslt/%s', stylesheet);

-- Execute the query
declare rset, triples, ses any;
rset := DB.DBA.SPARQL_EVAL_TO_ARRAY(query, '%DEFAULT_GRAPH%', 0);
triples := dict_list_keys(rset[0][0], 1);
ses := string_output();
if(_format = 'ttl') {
  DB.DBA.RDF_TRIPLES_TO_TTL(triples, ses);
} else {
  DB.DBA.RDF_TRIPLES_TO_RDF_XML_TEXT(triples, 1, ses);
}
if(_format = 'rdf') {
  http_header('Content-type: application/rdf+xml; charset=UTF-8\r\n');
} else if(_format = 'ttl') {
  http_header('Content-type: text/turtle; charset=UTF-8\r\n');
}
http(string_output_string(ses));
if(_format = 'html') {
  http_xslt(stylesheet, vector('subject-uri', _uri));
}
?>
