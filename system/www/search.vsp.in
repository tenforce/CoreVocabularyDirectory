<?vsp
-- /mdr/search handler script
--
-- Copyright 2014 European Union
-- Author: Vianney le ClÃ©ment de Saint-Marcq (PwC EU Services)
--
-- Licensed under the EUPL, Version 1.1 or - as soon they
-- will be approved by the European Commission - subsequent
-- versions of the EUPL (the "Licence");
-- You may not use this work except in compliance with the
-- Licence.
-- You may obtain a copy of the Licence at:
-- http://ec.europa.eu/idabc/eupl
--
-- Unless required by applicable law or agreed to in
-- writing, software distributed under the Licence is
-- distributed on an "AS IS" basis,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
-- express or implied.
-- See the Licence for the specific language governing
-- permissions and limitations under the Licence.

declare _q, _limit varchar;
_q := get_keyword('q', params, '');
_limit := atoi(get_keyword('limit', params, '0'));

-- Note: VSPs seem to always run with charset ISO-8859-1. Hence, while every
-- value is encoded in UTF-8, they are interpreted as latin1. This is not a
-- problem for most operations as the VSP does not need to understand the
-- content (as long as we do not perform operations like lowercasing).
-- However, when calling functions such as http_value, the correct encoding
-- must be used. We work around this by converting strings to wide strings
-- (nvarchar), while forcing the source encoding to UTF-8.
declare keyword nvarchar;
keyword := charset_recode(_q, 'UTF-8', '_WIDE_');

declare filter, limit, query, rq_classes, rq_elements varchar;
if(_q <> '') {
  _q := replace(_q, '\\', '\\\\');
  _q := replace(_q, '"', '\\"');
  _q := replace(_q, '\n', '\\n');
  _q := replace(_q, '\r', '\\r');
  filter := sprintf('FILTER(CONTAINS(LCASE(STR(?label)), LCASE("%s")) || CONTAINS(LCASE(STR(?definition)), LCASE("%s")))',
                    _q, _q);
} else {
  filter := '';
}
if(_limit > 0) {
  limit := sprintf('LIMIT %d', _limit);
} else {
  limit := '';
}

query := sprintf('CONSTRUCT {
                    ?s a ?class .
                    ?s mdr:context ?context .
										?s rdfs:label ?label .
										?s skos:definition ?definition .
                    ?context rdfs:label ?contextname .
                  } WHERE {
                    {
                      { SELECT * WHERE {
                          ?s a mdr:ObjectClass .
                          OPTIONAL { ?s mdr:context ?context .
                                     OPTIONAL { ?context rdfs:label ?contextname } }
                          OPTIONAL { ?s rdfs:label ?label }
                          OPTIONAL { ?s skos:definition ?definition }
                          %s
                          ?s a ?class .
                        } %s }
                    } UNION {
                      { SELECT * WHERE {
                          ?s a mdr:DataElement .
                          OPTIONAL { ?s mdr:context ?context .
                                     OPTIONAL { ?context rdfs:label ?contextname } }
                          OPTIONAL { ?s rdfs:label ?label }
                          OPTIONAL { ?s skos:definition ?definition }
                          %s
                          ?s a ?class .
                        } %s }
                    }
                  }', filter, limit, filter, limit);

declare rset, triples, ses any;
rset := DB.DBA.SPARQL_EVAL_TO_ARRAY(query, '%DEFAULT_GRAPH%', 0);
triples := dict_list_keys(rset[0][0], 1);
ses := string_output();
DB.DBA.RDF_TRIPLES_TO_RDF_XML_TEXT(triples, 1, ses);
http(string_output_string(ses));
http_xslt('%ROOTURI%xslt/search.xsl', vector('keyword', keyword));
?>
